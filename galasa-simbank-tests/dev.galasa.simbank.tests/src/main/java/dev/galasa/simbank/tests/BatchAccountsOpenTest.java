/*
 * Licensed Materials - Property of IBM
 * 
 * (c) Copyright IBM Corp. 2019.
 */
package dev.galasa.simbank.tests;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.logging.Log;

import dev.galasa.Test;
import dev.galasa.artifact.BundleResources;
import dev.galasa.artifact.IBundleResources;
import dev.galasa.core.manager.Logger;
import dev.galasa.zos.IZosImage;
import dev.galasa.zos.ZosImage;
import dev.galasa.zosbatch.IZosBatch;
import dev.galasa.zosbatch.IZosBatchJob;
import dev.galasa.zosbatch.ZosBatch;

@Test
public class BatchAccountsOpenTest {

    @ZosImage(imageTag = "SIMBANK")
    public IZosImage        image;
    
    @ZosBatch(imageTag = "SIMBANK")
    public IZosBatch 		zosBatch;

    @BundleResources
    public IBundleResources resources;
    
    @Logger
    public Log              logger;
    
    /**
     * Test which uses the SIMBANK batch job to open a number of new accounts.
     * The test passes if the job completes successfully (RC=0000)
     * @throws Exception
     */
    @Test
    public void batchOpenAccountsTest() throws Exception {
    	// Create a list of accounts to create
    	List<String> accountList = new LinkedList<>();
    	
    	//Adds accounts 901000001-9 to the accountList.
    	for(int x=1; x<10; x++) {
    		accountList.add("90100000"+x+",20-40-60,1000");
    		logger.info("Account 90100000"+x+" Has been added to the acctList");
    	}

    	// Create the substitution parameters for the JCL
    	HashMap<String, Object> parameters = new HashMap<>();
        parameters.put("CONTROL", "ACCOUNT_OPEN");
        parameters.put("DATAIN", String.join("\n", accountList));
        logger.info("Added accountList to the JCL substitution parameters.");
    	
	    // Load the JCL with the given substitution parameters
		String jcl = resources.retrieveSkeletonFileAsString("/resources/skeletons/SIMBANK.jcl", parameters);
		
		// Submit the JCL
		IZosBatchJob batchJob = zosBatch.submitJob(jcl, null);
		
		// Wait for the batch job to complete
		int rc = batchJob.waitForJob();
		
		// If highest CC was not 0, fail the test
		assertThat(rc).withFailMessage("The return code for the JCL Job was not equal to 0, indicating a failure").isEqualTo(0);
		
		assertThat(batchJob.getSpoolFile("SYSOUT").getRecords()).withFailMessage("The JCL SYSOUT Contains a line indicating a test failure.").doesNotContain("0                            Error Report");

		logger.info("Batch job complete RETCODE=" + rc);
    }
}